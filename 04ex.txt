{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 인공지능기초\n",
    "# [04실습]Matrix Decomposition"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "                                         201710779 휴먼지능정보공학과 사호진"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import numpy.linalg as  npl  # linear algebra\n",
    "import matplotlib.pyplot as plt\n",
    "import PIL\n",
    "from PIL import Image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcParams[ \"figure.figsize\" ] = (10,10)\n",
    "origin2D = np.array([0,0])\n",
    "origin3D = np.array([0,0,0])\n",
    "scale = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 0]\n",
      "[1 0]\n",
      "[[1]\n",
      " [0]]\n"
     ]
    }
   ],
   "source": [
    "print(np.array([1,0])) #행벡터\n",
    "print(np.hstack([1,0]))  #위랑 같은 뜻!\n",
    "\n",
    "print(np.vstack([1,0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.1.1 Determinant: 면적(2D)/부피(3D이상) 측정 도구"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A:\n",
      "[[1 0]\n",
      " [0 1]] \n",
      "\n",
      "det(A):\n",
      "1.0\n"
     ]
    }
   ],
   "source": [
    "# 1. |det(b,g)|\n",
    "\n",
    "g = np.vstack([1,0])\n",
    "b = np.vstack([0,1])\n",
    "\n",
    "# 1) g,b를 열벡터로 가지는 matrix A 선언\n",
    "A = np.hstack([g,b])\n",
    "print (\"A:\")\n",
    "print (A, \"\\n\")\n",
    "\n",
    "# 2) matrix A의 determinant 계산\n",
    "print (\"det(A):\")\n",
    "print (npl.det(A))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAlIAAAI/CAYAAAC8tTf3AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAVs0lEQVR4nO3db6ym9V3n8c8XBhD5p2ZAsgzDUOgsa6jdmtNCUw0EWgo4B5u4SdVoTHiAMdvYmjZdK4kPfLDZDYm1jcQucdfsBrIsG2mghKGCWkELZmaAsiIgE1OUlsoQWmzlTzv0tw9mhg7zf77nnnOde3i9EsLcf851fU+uzMx7ftd1X6fGGAEA4PAdM/UAAADzSkgBADQJKQCAJiEFANAkpAAAmoQUAEDTqil2unr16rFu3bopdg0AcFi2bNnywhjj9H29NklIrVu3Lps3b55i1wAAh6Wqntnfa07tAQA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoElIAQA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoElIAQA0zSykqurYqnqkqu6a1TYBAFayWa5IfTTJEzPcHgDAijaTkKqqNUl+NskfzWJ7AADzYFYrUr+f5JNJvj+j7QEArHhLDqmq2pDk+THGloO877qq2lxVm7dt27bU3QIATG4WK1LvS3JNVX01ya1JLquqm/d80xjjpjHGwhhj4fTTT5/BbgEAprXkkBpjfGqMsWaMsS7JLyT58zHGLy95MgCAFc59pAAAmlbNcmNjjC8l+dIstwkAsFJZkQIAaBJSAABNQgoAoElIAQA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoElIAQA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoElIAQA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoElIAQA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoGnJIVVVZ1fVX1TVE1X1eFV9dBaDAQCsdKtmsI3tST4+xni4qk5JsqWq7h1j/N0Mtg0AsGIteUVqjPHcGOPhnb/+dpInkpy11O0CAKx0M71GqqrWJXlXkr+Z5XYBAFaimYVUVZ2c5E+SfGyM8S/7eP26qtpcVZu3bds2q90CAExmJiFVVcdlR0TdMsa4fV/vGWPcNMZYGGMsnH766bPYLQDApGbxqb1K8t+TPDHG+L2ljwQAMB9msSL1viS/kuSyqnp0539Xz2C7AAAr2pJvfzDG+KskNYNZAADmijubAwA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoElIAQA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAJYRq9875Xc9vhteenVl6YeBZgBIQWwjE487sTc+re3ZvUNq3P5/7o8n37w09n64tapxwKaaoyx7DtdWFgYmzdvXvb9AqwEj37j0bzrv73rTc9dsPqCLK5fzOL6xbz37Pdm1TGrJpoO2FNVbRljLOzrNb9TgaPC3z71cn7tgauyak7+VDvh2BPy2uuvvfH4yReezJMvPJkbvnxDfuzEH8vVb786i+sX88HzPpjTfui0PPxw8lM/NeHAwD7NyR85AAd2512v58vfuX/qMWbixVdezM2P3ZybH7s5q45ZlSvOuyK597/mM9dfmPPPn3o6YHeukQKOChs3Tj3BbJ1x0hm59t9fm9v+w2255UP/Jw/ecWG+8IWppwL2ZEUKmHvf+lby5S+dnB997OU880xW/Om95//1+Vxw4wV5dfurb3r+nT/+zmxYvyGL6xfz7rPenWNqx791778/+eY3k7vuSn7zN6eYGNifFf7HDcDB3XNP8v3XK9/cdmIe3Zz8zM9MPdGB3bjpxry6/dUcf+zxuezcy7K4fjEb1m/I2tPW7vP9u1ai7r8/eeml5LTTlnFY4ICEFDD3dj/l9YUvrOyQeuV7r+TV7a/m8x/+fN7/tvfn5ONPPujX7Pr+tm/fEY0f/vARHhI4ZK6RAuba9u1vvj5qpV9HdOJxJ+azV302H7rgQ4cUUU8/nTz11A8er/TvD95qhBQw1/76r3dcP7TLk08mW4+i+1veddebH2/cuCMegZVBSAFzbc/Q2N9z82rPFagXX0wefHCaWYC9CSlgru3rVNfRcvrrW99KHnhg7+ePlu8PjgZCCphbe14/tMuuT7fNu3vu2fdpPCEFK4eQAubW/oJi16fb5t3+vr+j7TowmGdCCphbB1qZmfdVm90/jXjKKT94/tRTd/z/aLoODOaZkALm0v6uH9pl3j/d9uCDyaWXJo88kiwu/uD5Bx5IPvOZZMuWyUYDduOGnMBcuuee5PXX9//6rk+3reSbcx7IxRcnt9++9/Mnnpj8xm8k3/ve8s8E7M2KFDCXDuXU3Tyf3jvuuKW9DiwPIQXMnT3vZr4/8xxSwHwQUsDc2fNu5vvj023AkSakgLlzOJ9Y8+k24EgSUsDc2XXK7qqrkptv3vv1O+5Ifvqn3/xegCNBSAFz5emnk7e9LXnooeTuu5OLLtr7PZdfvuPu5vfdl4xxdNzlHFiZ3P4AmCvnnrsjoA6makdQXXbZgW+TALAUVqSAubLqMP/5V3X4XwNwqIQUAECTkAIAaBJSAABNQgoAoElIAQA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSADP22vbX8vy/Pj/1GMAyWDX1AABHm+OPPT7X/O9rUlVZXL+YDes35B1nvCNVNfVowIxZkQKYsarK71zyO3no2Ydy/Z9fn3d+7p059zPn5iN3fyRf3PrFvLb9talHBGZkJiFVVVdW1VNVtbWqfmsW2wSYZ1edf1Xe/W/e/cbjZ156JjduujFX3nJlVt+wOj9/28/njx/5Y6cAYc4t+dReVR2b5MYkH0jybJJNVXXnGOPvlrptgI5//s4/54fHmHqM/PrCr2fTnZv2ev473/1Obn/i9tz+xO2pVC5ac5FTgDCnZnGN1HuSbB1j/EOSVNWtSX4uiZACJnHeZ9+WHP/y1GMckpGRh5596I3TgOecdk42rN+QxfWLuXTdpTlh1QlTjwgcwCxC6qwk/7Tb42eTXDSD7QK85ew6BXjjphtz0nEn5Yrzrshz37whyXlTjwbswyxCal9r0HutqVfVdUmuS5K1a9fOYLcAyfnnJ2Mk337t2zn1v5w69TgzVVWpqvzaf34gd/zfU3LGSWdMPRKwh1mE1LNJzt7t8ZokX9/zTWOMm5LclCQLCwvTX7wAsAKdc9o5WVy/mMV/u5hLzrnEqT1Y4WYRUpuSvL2qzk3ytSS/kOSXZrBdgEN20vEn5bmPPzf1GG+y8emNufbOaw/4nkrl4jUXv3Gx+YVnXOhic5gjSw6pMcb2qvpIki8mOTbJ/xhjPL7kyQAOwzF1TM48+cypx3jDGCN/uPkP9/naycefnA+e98FsWL8hV7/9aqfsYI7N5M7mY4y7k9w9i20BHA02bt2YTV//wa0PnLKDo5MfEQMwY2OM/O5f/m7eu+a9TtnBUU5IAczYd1//bu78xTudsoO3ACEFMGMnrDohZ6wSUfBW4IcWAwA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoElIAQA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoElIAQA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoElIAQA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoElIAQA0LSmkquqGqnqyqh6rqs9X1Y/MajAAgJVuqStS9ya5cIzxk0n+Psmnlj4SAMB8WFJIjTH+dIyxfefDh5KsWfpIAADzYZbXSF2bZOMMtwcAsKKtOtgbquq+JGfu46Xrxxh37HzP9Um2J7nlANu5Lsl1SbJ27drWsAAAK8lBQ2qM8f4DvV5Vv5pkQ5LLxxjjANu5KclNSbKwsLDf9wEAzIuDhtSBVNWVSf5TkkvGGC/PZiQAgPmw1Guk/iDJKUnurapHq+pzM5gJAGAuLGlFaoxx/qwGAQCYN+5sDgDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoElIAQA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoElIAQA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoElIAQA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoElIAQA0CSkAgCYhBQDQJKQAAJqEFABA00xCqqo+UVWjqlbPYnsAAPNgySFVVWcn+UCSf1z6OAAA82MWK1KfTvLJJGMG2wIAmBtLCqmquibJ18YYX5nRPAAAc2PVwd5QVfclOXMfL12f5LeTXHEoO6qq65JclyRr1649jBEBAFamGqN3Rq6q3pHkz5K8vPOpNUm+nuQ9Y4xvHOhrFxYWxubNm1v7BQBYTlW1ZYyxsK/XDroitT9jjP+X5IzddvLVJAtjjBe62wQAmCfuIwUA0NRekdrTGGPdrLYFADAPrEgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoElIAQA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaBJSAABNQgoAoElIAQA0CSkAgCYhBQDQJKQAAJqEFABAk5ACAGgSUgAATUIKAKBJSAEANAkpAIAmIQUA0CSkAACahBQAQJOQAgBoElIAAE1CCgCgSUgBADQJKQCAphpjLP9Oq7YleWbZd7x8Vid5YeohaHHs5pvjN98cv/l1tB+7c8YYp+/rhUlC6mhXVZvHGAtTz8Hhc+zmm+M33xy/+fVWPnZO7QEANAkpAIAmIXVk3DT1ALQ5dvPN8Ztvjt/8esseO9dIAQA0WZECAGgSUkdYVX2iqkZVrZ56Fg5NVd1QVU9W1WNV9fmq+pGpZ+LAqurKqnqqqrZW1W9NPQ+HrqrOrqq/qKonqurxqvro1DNxeKrq2Kp6pKrumnqWKQipI6iqzk7ygST/OPUsHJZ7k1w4xvjJJH+f5FMTz8MBVNWxSW5MclWSn0jyi1X1E9NOxWHYnuTjY4x/l+TiJP/R8Zs7H03yxNRDTEVIHVmfTvLJJC5EmyNjjD8dY2zf+fChJGumnIeDek+SrWOMfxhjfDfJrUl+buKZOERjjOfGGA/v/PW3s+Mv5LOmnYpDVVVrkvxskj+aepapCKkjpKquSfK1McZXpp6FJbk2ycaph+CAzkryT7s9fjb+Ip5LVbUuybuS/M20k3AYfj87Fgy+P/UgU1k19QDzrKruS3LmPl66PslvJ7lieSfiUB3o2I0x7tj5nuuz47TDLcs5G4et9vGcVeA5U1UnJ/mTJB8bY/zL1PNwcFW1IcnzY4wtVXXp1PNMRUgtwRjj/ft6vqrekeTcJF+pqmTHqaGHq+o9Y4xvLOOI7Mf+jt0uVfWrSTYkuXy4R8hK92ySs3d7vCbJ1yeahYaqOi47IuqWMcbtU8/DIXtfkmuq6uokP5Tk1Kq6eYzxyxPPtazcR2oZVNVXkyyMMY7mH+h41KiqK5P8XpJLxhjbpp6HA6uqVdnxoYDLk3wtyaYkvzTGeHzSwTgkteNfm/8zyYtjjI9NPQ89O1ekPjHG2DD1LMvNNVKwtz9IckqSe6vq0ar63NQDsX87PxjwkSRfzI4LlW8TUXPlfUl+JcllO3+/PbpzhQPmghUpAIAmK1IAAE1CCgCgSUgBADQJKQCAJiEFANAkpAAAmoQUAECTkAIAaPr/upBvPX1GqXUAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 화살표 그리기 : 원점(x,y), 방향(u,v)\n",
    "plt.axis([-scale/2,scale/2,-scale/2,scale/2])\n",
    "\n",
    "plt.quiver(origin2D[0], origin2D[1], g[0], g[1], scale = scale, color = \"g\")\n",
    "plt.quiver(origin2D[0], origin2D[1], b[0], b[1], scale = scale, color = \"b\")\n",
    "plt.quiver(g[0], g[1], b[0], b[1], scale = scale, width = 0.005, color = \"b\")\n",
    "plt.quiver(b[0], b[1], g[0], g[1], scale = scale, width = 0.005, color = \"g\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A:\n",
      "[[ 2  6  1]\n",
      " [ 0  1  4]\n",
      " [-8  0 -1]] \n",
      "\n",
      "det(A):\n",
      "-185.99999999999991\n"
     ]
    }
   ],
   "source": [
    "# 2. |det([r,b,g])|\n",
    "\n",
    "r = np.vstack([2,0,-8])\n",
    "g = np.vstack([6,1,0])\n",
    "b = np.vstack([1,4,-1])\n",
    "A = np.hstack([r,g,b])\n",
    "print (\"A:\")\n",
    "print(A, \"\\n\")\n",
    "\n",
    "print (\"det(A):\")\n",
    "print (npl.det(A))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from mpl_toolkits import mplot3d\n",
    "%matplotlib inline\n",
    "\n",
    "# Figure setup\n",
    "fig = plt.figure()\n",
    "ax = plt.axes(projection=\"3d\")\n",
    "scale3D = 15\n",
    "ax.set_xlim(-scale3D,scale3D)\n",
    "ax.set_ylim(scale3D,-scale3D)\n",
    "ax.set_zlim(-scale3D,scale3D)\n",
    "ax.grid(b=None)\n",
    "\n",
    "# determinant 그리기\n",
    "ax.quiver(origin3D[0],origin3D[1],origin3D[2],\n",
    "          A[0,0],A[1,0],A[2,0],\n",
    "          color = \"r\",linewidths = .5, arrow_length_ratio = .05)\n",
    "ax.quiver(origin3D[0],origin3D[1],origin3D[2],\n",
    "          A[0,1],A[1,1],A[2,1],\n",
    "          color = \"g\",linewidths = .5, arrow_length_ratio = .05)\n",
    "ax.quiver(origin3D[0],origin3D[1],origin3D[2],\n",
    "          A[0,2],A[1,2],A[2,2],\n",
    "          color = \"b\",linewidths = .5, arrow_length_ratio = .05)\n",
    "\n",
    "import itertools as it\n",
    "quiverkey = dict(linewidths = .5, arrow_length_ratio = .05, label=\"_nolegend_\")\n",
    "c = [\"r\",\"g\",\"b\"]\n",
    "\n",
    "for i in[i for i in list(it.product([0,1,2],repeat=2)) if i[0] != i[1]]:\n",
    "    ax.quiver(A[0,i[0]], A[1,i[0]], A[2,i[0]],\n",
    "    A[0,i[1]], A[1,i[1]], A[2,i[1]],\n",
    "    color = c[i[1]], **quiverkey)\n",
    "    \n",
    "ax.quiver(A[0,1]+A[0,2], A[1,1]+A[1,2], A[2,1]+A[2,2],\n",
    "         A[0,0], A[1,0], A[2,0],\n",
    "         color = \"r\", **quiverkey)\n",
    "ax.quiver(A[0,2]+A[0,0], A[1,2]+A[1,0], A[2,2]+A[2,0],\n",
    "         A[0,1], A[1,1], A[2,1],\n",
    "         color = \"g\", **quiverkey)\n",
    "ax.quiver(A[0,0]+A[0,1], A[1,0]+A[1,1], A[2,0]+A[2,1],\n",
    "         A[0,2], A[1,2], A[2,2],\n",
    "         color = \"b\", **quiverkey)\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.1.3 Trace"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A:\n",
      "[[  3   4  -8]\n",
      " [  1   3   7]\n",
      " [  6 -11   2]] \n",
      "\n",
      "Trace(A):\n",
      "8\n"
     ]
    }
   ],
   "source": [
    "A = np.array([[3,4,-8],\n",
    "             [1,3,7],\n",
    "             [6,-11,2]])\n",
    "print (\"A:\")\n",
    "print (A, \"\\n\")\n",
    "\n",
    "print (\"Trace(A):\")\n",
    "print (np.trace(A))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tr(xy^T): \n",
      "19\n",
      "x^Ty: \n",
      "[[19]]\n"
     ]
    }
   ],
   "source": [
    "x = np.vstack([3,-1])\n",
    "y = np.vstack([8,5])\n",
    "\n",
    "print (\"tr(xy^T): \")\n",
    "yt = np.transpose(y)\n",
    "print (np.trace( x.dot(yt) ))\n",
    "\n",
    "print (\"x^Ty: \")\n",
    "xt = np.transpose(x)\n",
    "print (xt.dot(y))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cholesky decomposition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A:\n",
      "[[3 2 2]\n",
      " [2 3 2]\n",
      " [2 2 3]]\n",
      "Cholesky(A): L\n",
      "[[1.73205081 0.         0.        ]\n",
      " [1.15470054 1.29099445 0.        ]\n",
      " [1.15470054 0.51639778 1.18321596]]\n",
      "L^T\n",
      "[[1.73205081 1.15470054 1.15470054]\n",
      " [0.         1.29099445 0.51639778]\n",
      " [0.         0.         1.18321596]]\n"
     ]
    }
   ],
   "source": [
    "A = np.vstack([[3,2,2],[2,3,2],[2,2,3]])\n",
    "print (\"A:\")\n",
    "print (A)\n",
    "\n",
    "print (\"Cholesky(A): L\")\n",
    "print (npl.cholesky(A))\n",
    "\n",
    "print (\"L^T\")\n",
    "print (np.transpose( npl.cholesky(A) ))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.3 Eigendecomposition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A:\n",
      "[[4 2]\n",
      " [1 3]] \n",
      "\n",
      "[5. 2.]\n",
      "[[ 0.89442719 -0.70710678]\n",
      " [ 0.4472136   0.70710678]]\n",
      "u1:  [[0.89442719]\n",
      " [0.4472136 ]]\n",
      "u2:  [[-0.70710678]\n",
      " [ 0.70710678]]\n",
      "eigen values:  5.0 2.0 \n",
      "\n",
      "Au1:  [[4.47213595]\n",
      " [2.23606798]]\n",
      "l1*u1:  [[4.47213595]\n",
      " [2.23606798]]\n",
      "Au2:  [[-1.41421356]\n",
      " [ 1.41421356]]\n",
      "l2*u2:  [[-1.41421356]\n",
      " [ 1.41421356]]\n"
     ]
    }
   ],
   "source": [
    "A = np.vstack([[4,2],[1,3]])\n",
    "print (\"A:\")\n",
    "print (A, \"\\n\")\n",
    "\n",
    "e_values, e_vectors = npl.eig(A)\n",
    "print (e_values)\n",
    "print (e_vectors)\n",
    "\n",
    "# eigen vector u1, u2\n",
    "u1 = np.vstack(e_vectors[:,0])\n",
    "u2 = np.vstack(e_vectors[:,1])\n",
    "print (\"u1: \", u1)\n",
    "print(\"u2: \", u2)\n",
    "\n",
    "# eigen valus lambda1, lambda2\n",
    "l1, l2 = e_values[0], e_values[1]\n",
    "print (\"eigen values: \", l1,l2, \"\\n\")\n",
    "\n",
    "#Check\n",
    "print (\"Au1: \", np.dot(A, u1))\n",
    "print (\"l1*u1: \", l1*u1)\n",
    "\n",
    "print (\"Au2: \", np.dot(A, u2))\n",
    "print (\"l2*u2: \", l2*u2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4.4 Singular value decomposition (SVD)\n",
    "## Image processing/reconstruction with the SVD"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1) Stonehenge 이미지 파일 파악\n",
    "\n",
    "### P.S 교수님 모르겠습니다.....ㅠㅅㅠ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'stonehenge.png'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-75-194a1dacdc17>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mPIL\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mstonehenge\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'stonehenge.png'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstonehenge\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstonehenge\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/PIL/Image.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(fp, mode)\u001b[0m\n\u001b[1;32m   2807\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2808\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2809\u001b[0;31m         \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuiltins\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2810\u001b[0m         \u001b[0mexclusive_fp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2811\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'stonehenge.png'"
     ]
    }
   ],
   "source": [
    "from PIL import Image\n",
    "stonehenge = Image.open('stonehenge.png')\n",
    "\n",
    "print(stonehenge)\n",
    "print(stonehenge.format)\n",
    "print(stonehenge.size)\n",
    "print(stonehenge.mode)\n",
    "\n",
    "plt.imshow(stonehenge)\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# 왜 이런 현상이 발생하는지 모르겠습니다.....\n",
    "# 경로 설정도 바꿔보고 거기서 유니코드문제(\\->/)도 만져보고 mode도 설정해봤지만..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "(unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \\UXXXXXXXX escape (<ipython-input-78-1c28b1cf7a03>, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-78-1c28b1cf7a03>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    stonehenge = Image.open('C:\\Users\\USER\\Desktop\\stonehenge.png')\u001b[0m\n\u001b[0m                           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \\UXXXXXXXX escape\n"
     ]
    }
   ],
   "source": [
    "# 경로를 설정해줘야하나..?\n",
    "from PIL import Image\n",
    "stonehenge = Image.open('C:\\Users\\USER\\Desktop\\stonehenge.png')\n",
    "\n",
    "print(stonehenge)\n",
    "print(stonehenge.format)\n",
    "print(stonehenge.size)\n",
    "print(stonehenge.mode)\n",
    "\n",
    "plt.imshow(stonehenge)\n",
    "plt.show()\n",
    "\n",
    "# 유니코드...?     \\를 /로 바꿔줘보자"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'C:/Users/USER/Desktop/stonehenge.png'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-79-77071587031f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mPIL\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mstonehenge\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'C:/Users/USER/Desktop/stonehenge.png'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstonehenge\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstonehenge\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/PIL/Image.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(fp, mode)\u001b[0m\n\u001b[1;32m   2807\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2808\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2809\u001b[0;31m         \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuiltins\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2810\u001b[0m         \u001b[0mexclusive_fp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2811\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'C:/Users/USER/Desktop/stonehenge.png'"
     ]
    }
   ],
   "source": [
    "from PIL import Image\n",
    "stonehenge = Image.open('C:/Users/USER/Desktop/stonehenge.png')\n",
    "\n",
    "print(stonehenge)\n",
    "print(stonehenge.format)\n",
    "print(stonehenge.size)\n",
    "print(stonehenge.mode)\n",
    "\n",
    "plt.imshow(stonehenge)\n",
    "plt.show()\n",
    "\n",
    "# 아니네...mode설정을 해야하나"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'C:/Users/USER/Desktop/stonehenge.png'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-80-34de2d1f5dd0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mPIL\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mstonehenge\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'C:/Users/USER/Desktop/stonehenge.png'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"r\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstonehenge\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstonehenge\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/PIL/Image.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(fp, mode)\u001b[0m\n\u001b[1;32m   2807\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2808\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2809\u001b[0;31m         \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuiltins\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2810\u001b[0m         \u001b[0mexclusive_fp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2811\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'C:/Users/USER/Desktop/stonehenge.png'"
     ]
    }
   ],
   "source": [
    "from PIL import Image\n",
    "stonehenge = Image.open('C:/Users/USER/Desktop/stonehenge.png', \"r\")\n",
    "\n",
    "print(stonehenge)\n",
    "print(stonehenge.format)\n",
    "print(stonehenge.size)\n",
    "print(stonehenge.mode)\n",
    "\n",
    "plt.imshow(stonehenge)\n",
    "plt.show()\n",
    "\n",
    "# 아니네....\n",
    "# 그래도 나머지 코드를 쓰면서 공부해보겠습니다..ㅠㅠ"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2) 픽셀값 0~1사이로 만들기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'stonehenge' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-53-e81055054ab8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# numpy arra 로 바꾸기\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# 0~1 사이값으로 만들기\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mimMatrix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstonehenge\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconvert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"L\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m255.0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0mimMatrix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0mimMatrix\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'stonehenge' is not defined"
     ]
    }
   ],
   "source": [
    "# RGB -> grayscale 로 바꾸기\n",
    "# numpy arra 로 바꾸기\n",
    "# 0~1 사이값으로 만들기\n",
    "imMatrix = np.array(stonehenge.convert(\"L\"))/255.0\n",
    "print( imMatrix.shape )\n",
    "print( imMatrix )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'imMatrix' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-76-9b7822f6868b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mscalar\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mshape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimMatrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mU\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mS\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mV\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnpl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msvd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimMatrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# h x h identity matrix 곱하기 singular value (635,635)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# w0h 만큼 뒤에 0 붙히기 (635,960)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'imMatrix' is not defined"
     ]
    }
   ],
   "source": [
    "scalar = 1/2\n",
    "shape = np.shape(imMatrix)\n",
    "U,S,V = npl.svd(imMatrix)\n",
    "# h x h identity matrix 곱하기 singular value (635,635)\n",
    "# w0h 만큼 뒤에 0 붙히기 (635,960)\n",
    "sd = np.hstack([np.eye(shape[0])*S.copy(),np.zero((shape[0],shape[-1]-shape[0]))])\n",
    "print( np.shape[U],np.shape[Sd],np.shape[V])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'U' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-77-cb2cedc659ab>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# Check 1. 원본 영상 vs. U x Sd x V\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# U x Sd x V\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0musv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mU\u001b[0m \u001b[0;34m@\u001b[0m \u001b[0mSd\u001b[0m \u001b[0;34m@\u001b[0m \u001b[0mV\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;31m# np.matmul( np.matmul(U, Sd), V)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# usv = U.dot(Sd).dot(V)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'U' is not defined"
     ]
    }
   ],
   "source": [
    "# ---image reconstruction with the SVD ---\n",
    "# Check 1. 원본 영상 vs. U x Sd x V\n",
    "# U x Sd x V\n",
    "usv = U @ Sd @ V\n",
    "# np.matmul( np.matmul(U, Sd), V)\n",
    "# usv = U.dot(Sd).dot(V)\n",
    "print( np.allclose(imMatrix, usv) ) #같으면 True\n",
    "\n",
    "# Check 2. U x Sd X V 그려보기\n",
    "plt.imshow(usv, cmap='gray')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $$ 4)  A_1시각화 $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'U' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-81-55601822f4e6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mU\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdiag\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mS\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mV\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'U' is not defined"
     ]
    }
   ],
   "source": [
    "k=1 \n",
    "print(np.shape(U[:,:k]))\n",
    "print(np.shape(np.diag(S[:k])))\n",
    "print(np.shape(V.T[:,:k].T))\n",
    "\n",
    "m,n = np.shape(imMatrix)\n",
    "partial,total = k*(m+n)+k, m*n\n",
    "print(np.ndim(ImMatrix),[np.shape(i) for i in [imMatrix,U,Sd,V]])\n",
    "print(partial,total, partial/total)\n",
    "\n",
    "size = (200,200)\n",
    "imtemp = lambda l: (np.vstack(U[:,k-1])@np.vstack([S[k-1]])@np.vstack(V[k-1]).T)*255\n",
    "for i in list(range(1,6)):\n",
    "    im = Image.fromarray(imtemp(i).astype('uint8'))\n",
    "    im.thumbnail(size, Image.ANTIALIAS)\n",
    "    plt.imshow(im, cmap='gray')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'S' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-82-df7082a4ea4d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mquality\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdiag\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mS\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mquality\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mU\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mquality\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mV\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mquality\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mquality\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'S' is not defined"
     ]
    }
   ],
   "source": [
    "quality = 5\n",
    "np.shape(np.diag(S[:quality]))\n",
    "np.shape(U[:,:quality])\n",
    "np.shape(V[:quality,:])\n",
    "k = quality\n",
    "m,n = np.shape(imMatrix)\n",
    "partial.total = K*(m+n)+k, m*n\n",
    "np.ndim(imMatrix),[np.shape(i) for i in [imMatrix,U,Sd,V]]\n",
    "partial,total, partial/total\n",
    "\n",
    "imtemp = lambda k: (U[:,:k]@np.diag(S[:k])@V.T[:,:k].T)*255\n",
    "for i in list(range(1,k+1)):\n",
    "    im = Image.fromarray(imtemp(i).astype('uint8'))\n",
    "    im.thumbnail(size, Image.ANTIALIAS)\n",
    "    plt.imshow(im, cmap='gray')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'imtemp' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-83-112de09f3669>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimtemp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimMatrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mpartial\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtotal\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mm\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mm\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mpartial\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtotal\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpartial\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mtotal\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'imtemp' is not defined"
     ]
    }
   ],
   "source": [
    "k = 30\n",
    "im = imtemp(k)\n",
    "m,n = np.shape(imMatrix)\n",
    "partial,total = (k*(m+n)+k, m*n)\n",
    "partial,total, partial/total\n",
    "\n",
    "plt.imshow(im, cmap='gray')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "conda_pytorch_p36",
   "language": "python",
   "name": "conda_pytorch_p36"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
